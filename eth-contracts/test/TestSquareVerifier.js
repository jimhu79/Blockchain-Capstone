// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let SquareVerifier = artifacts.require('SquareVerifier');
const proof = require('../../zokrates/code/square/proof.json');


contract('TestSquareVerifier', accounts => {

    const account_one = accounts[0];

    describe('Testing Square Verifier', function () {
        beforeEach(async function () {
            this.contract = await SquareVerifier.new(account_one);
        });

        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('Test verification proof with correct proof', async function () {
            let verified = await this.contract.verifyTx.call(proof.proof.a, proof.proof.b, proof.proof.c, proof.inputs);
            assert.equal(verified, true, "Correct proof did not work.");
        });

        // Test verification with incorrect proof
        it('Test verification with incorrect proof', async function () {
            let invalidA = ["0x0", "0x0"];
            let verified = await this.contract.verifyTx.call(invalidA, proof.proof.b, proof.proof.c, proof.inputs);
            assert.equal(verified, false, "Incorrect proof was accepted");
        })
    });

})
